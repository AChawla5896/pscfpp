Chemistry Descriptors
---------------------

class Monomer {
   Members: id_, step_, name_
}

class Block
{
   Members: id_, monomerId_, Pair<int> vertexIds_, length_
}

class Vertex
{
   int id_;
   std::vector<int> blocksIds_;
}

class Polymer
{
   Members: nVertex_, nBlock_, vertices_, blocks_, plan_
};

class Solvent
{
   Associated: Monomer
   Member:     Volume
};


Solver Interfaces (System specific)
-----------------------------------

class SpeciesSolver
{
public:

   enum Ensemble {UNKNOWN, CLOSED, OPEN};

   SpeciesSolver();

   /**
   * Sets volume fraction phi and sets ensemble to closed.
   */
   void setPhi();

   /**
   * Sets chemical potential and sets ensemble to closed.
   */
   void setMu();

   void init() = 0;

   /**
   * Solve modified diffusion equation.
   */
   virtual void compute() = 0;

   /**
   * Get overall volume fraction for this species.
   */
   double phi() const;

   /**
   * Get chemical potential for this species.
   */
   double mu() const;

   /**
   * Get normalized partition function for this species.
   */
   double z() const;

protected:

   int ensemble_;
   double phi_;
   double mu_;
   double z_;
   bool isComputed_;

}

template <class BSolver>
class PolymerSolver : public SpeciesSolver
{
public:

   void init();

   void compute();

   /**
   * Get monomer concentration field for specific block.
   */
   const Field& blockConcentration(int monomerId) const;

private:

   Polymer* polymerPtr_;

   GArray<Pair<BSolver>> blockSolvers_;

   GArray<Field> blockConcentrations_;

};

class SolventSolver : public Species
{
public:

   void init();

   void compute();

   /**
   * Get monomer concentration field for specific block.
   */
   const Field& blockConcentration(int monomerId) const;

private:

   Solvent* solventPtr_;

};

template <class Field>
class BlockSolver
{
public:
   void init();
   void compute(Field& omega);
   const Field& q() const;
private:
   Block* blockPtr_;
   int sign_;
   Vertex* headVertex_;
   Vertex* tailVertex_;
   GArray<BlockSolver<Field>*> sourcesPtrs_;
};

-------------------------------------------------------------------
Fields:

/**
* A field that may be represented using either a grid or a basis.
*/
class Field
{
   void clear();
   Array<double>& nodes();
   Array<double>& coeffs();
};

class SystemSolver
{
public:

   int nMonomer();
   int nSpecies();

   Monomer& monomer(int id);
   Species& Species(int id);

   /**
   * Compute ideal gas properties for all species.
   */
   virtual void compute();

   /**
   * Return omega field for monomer index id.
   */
   virtual Field& omega(int id) = 0;

   /**
   * Return rho (volume fraction) field for monomer 
   * index id.
   */
   virtual Field& rho(int id) = 0;

private:

   DArray<Monomer>  monomers_;
   PArray<Species>  species_;

};

-----------------------------------------------------------------------
Concrete Solver Classes:

class FourierBasis {};
class PeriodicField : public Field {};
class PlaneWaveField : public PeriodicField {};
class PseudoSpectralLinkSolver{};

