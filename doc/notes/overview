Chemistry Descriptors
---------------------

class Monomer {
   Members: id_, step_, name_
}

class Block
{
   Members: id_, monomerId_, Pair<int> vertexIds_, length_
}

class Vertex
{
   int id_;
   std::vector<int> blocksIds_;
}

class Polymer
{
   Members: nVertex_, nBlock_, vertices_, blocks_, plan_
};

class Solvent
{
   Associated: Monomer
   Member:     Volume
};


Solver Interfaces (System specific)
-----------------------------------

template <class BlockSolver, class SolventSolver,
          class WField, class QField, class CField>
class SystemSolver
{
public:

   int nMonomer();
   int nPolymer();
   int nSolvent();

   Monomer& monomer(int id);
   PolymerSolver& polymer(int id);
   SolventSolver& solvent(int id);

   /**
   * Compute ideal gas properties for all species.
   */
   virtual void compute();

   /**
   * Return W (chemical potential) field for monomer index id.
   */
   virtual WField& w(int id);

   /**
   * Return concentration field for monomer index id.
   */
   virtual CField& c(int id);

private:

   DArray<Monomer> monomers_;
   DArray<WField> wFields_;
   DArray<CField> cFields_;
   DArray<PolymerSolver> polymers_;
   DArray<SolventSolver> solvents_;

};

class SpeciesSolver
{
public:

   enum Ensemble {UNKNOWN, CLOSED, OPEN};

   SpeciesSolver();

   /**
   * Set volume fraction phi, and set ensemble to closed.
   */
   void setPhi();

   /**
   * Sets chemical potential, and sets ensemble to open.
   */
   void setMu();

   /**
   * Complete initialization.
   */
   void init() = 0;

   /**
   * Solve modified diffusion equation.
   */
   virtual void compute() = 0;

   /**
   * Get overall volume fraction for this species.
   */
   double phi() const;

   /**
   * Get chemical potential for this species (units kT=1).
   */
   double mu() const;

   /**
   * Get scalar partition function for this species.
   */
   double q() const;

protected:

   double phi_;
   double mu_;
   double q_;
   int ensemble_;
   bool isComputed_;

}

template <class BlockSolver>
class PolymerSolver : public SpeciesSolver, public Polymer
{
public:

   /**
   * Complete initialization.
   */
   virtual void readParameters();

   virtual void compute();

   /**
   * Get monomer concentration field for specific block.
   */
   const cField& c(int blockId) const;

private:

   DArray<Pair<BlockSolver>> blockSolvers_;

   DArray<CField> cFields_;

   void init();

};

class SolventSolver : public SpeciesSolver, public Solvent
{
public:

   void init();

   void compute();

   /**
   * Get monomer concentration field for this solvent.
   */
   const CField& c(int monomerId) const;

protected:

   CField cField_;

};

template <class WField, class QField, class CField>
class BlockSolver
{
public:
   void init();
   void compute(WField& wField);
   const QField& qField() const;
private:
   Block* blockPtr_;
   int sign_;
   Vertex* headVertex_;
   Vertex* tailVertex_;
   GArray<BlockSolver<Field>*> sourcesPtrs_;
};

-------------------------------------------------------------------
Fields:

/**
* A field that may be represented using either a grid or a basis.
*/
class Field
{
   void clear();
   Array<double>& nodes();
   Array<double>& coeffs();
};

-----------------------------------------------------------------------
Concrete Solver Classes:

class FourierBasis {};
class PeriodicField : public Field {};
class PlaneWaveField : public PeriodicField {};
class PseudoSpectralLinkSolver{};

