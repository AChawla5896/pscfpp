Chemistry Descriptors
---------------------

class Monomer {
   Data: id_, step_, name_
};

class Block
{
   Data: id_, monomerId_, Pair<int> vertexIds_, length_
};

class Vertex
{
   int id_;
   GArray< Pair<int> > inBlockIds_;
   GArray< Pair<int> > inBlockIds_;
};

class PolymerDescriptor
{
   Data: nVertex_, nBlock_, vertices_, propagators_, plan_
};

class SolventDescriptor
{
   Data: monomerId, volume 
};

-------------------------------------------------------------
Field Class Concepts:

class WField {

   // Read-only access by grid point
   const Array<double>& grid();
   double operator [] (int i) const;

   // Read-write access by basis function coefficient
   Array<double>& basis();
   double& operator () (int i);
   double operator () (int i) const;

   computeGrid();
};

class CField {

   // Read-write access by grid point
   const Array<double>& grid();
   double& operator [] (int i);
   double operator [] (int i) const;

   // Read-write access by basis function coefficient
   Array<double>& basis);
   double& operator () (int i);
   double operator () (int i) const;

   computeGrid();
   computeBasis();
};

class QField 
{
   /**
   * Set to identity field.
   */
   setToIdentity();

   // Read-write access by grid point
   double& operator () (int i);
   double operator [] (int i) const;

   // Multipication of fields
   QField& operator *= (QField& );
};

-------------------------------------------------------------
Propagator Class Template:

template <class W, class Q>
class Propagator
{
public:

   void setBlock(Block& block, int sign);
   void addSource(Propagator<W, Q>& other);
   void init();
   void compute(W& w);

   const Block& block() const;
   const Q& tail() const;

private:

   Block* blockPtr_;
   int sign_;
   GArray<Propagator<W, Q>*> sourcesPtrs_;

};

-------------------------------------------------------------
Molecular Species Base Classes and Templates:

class Species
{
public:

   enum Ensemble {UNKNOWN, CLOSED, OPEN};

   Species();

   /**
   * Set volume fraction phi, and set ensemble to closed.
   */
   void setPhi(double phi);

   /**
   * Sets chemical potential, and sets ensemble to open.
   */
   void setMu(double mu);

   /**
   * Complete initialization.
   */
   void init() = 0;

   /**
   * Solve modified diffusion equation.
   */
   virtual void compute() = 0;

   /**
   * Get overall volume fraction for this species.
   */
   double phi() const;

   /**
   * Get chemical potential for this species (units kT=1).
   */
   double mu() const;

   /**
   * Get scalar partition function for this species.
   */
   double q() const;

protected:

   double phi_;
   double mu_;
   double q_;
   int ensemble_;
   bool isComputed_;

};

template <class P, class C>
class Polymer : public Species, public PolymerDescriptor
{
public:

   /**
   * Complete initialization.
   */
   virtual void readParameters();

   virtual void compute();

   /**
   * Get monomer concentration field for specific block.
   */
   const cField& concentration(int blockId, int sign) const;

private:

   DArray<Pair<P>> propagators_;

   DArray<C> concentrations_;

   void init();
};


template <class C>
class Solvent : public Species, public SolventDescriptor
{
public:

   void init();

   void compute();

   /**
   * Get monomer concentration field for this solvent.
   */
   const C& concentration() const;

protected:

   C concentration_;

};

template <class Monomer, class Polymer, class Solvent,
          class W, class Q, class C>
class System
{
public:

   int nMonomer();
   int nPolymer();
   int nSolvent();

   Monomer& monomer(int id);
   Polymer& polymer(int id);
   Solvent& solvent(int id);

   /**
   * Compute ideal gas properties for all species.
   */
   virtual void compute();

   /**
   * Return W (chemical potential) field for monomer index id.
   */
   virtual W& w(int id);

   /**
   * Return concentration field for monomer index id.
   */
   virtual C& c(int id);

private:

   DArray<Monomer> monomers_;
   DArray<W> wFields_;
   DArray<C> cFields_;
   DArray<Polymer> polymers_;
   DArray<Solvent> solvents_;

};
