-------------------------------------------------------------
Field Class Concepts:

template <typename T>
class GridField : public DArray<double>
{

   double operator [](int i);
   const double& operator [](int i) const;

   // Function to access by GridVector
   double operator ()(Grid::Vector& position);
   const double& operator ()(Grid::Vector& position) const;

   // Assignment operator
   GridField<T>& operator = (RGridField& other);

   // Increment operator
   GridField<T>& operator += (RGridField& other);

   // Decrement operator
   GridField<T>& operator -= (RGridField& other);
};

class WField : public GridField<double>
{
   /**
   * Set to zero.
   */
   setToZero();

};


class CField : public GridField<double>
{

   /**
   * Set to zero.
   */
   setToZero();

};


class QField 
{
   /**
   * Set to identity field.
   */
   setToIdentity();

   /**
   * Compute and return spatial average.
   */
   virtual double average();

   // Pointwise multipication of fields
   QField& operator *= (QField& other);

};

Functions:

1) Inner product of WField and CField, and CField and CField.

2) Other functions (quadratic forms involving C) are model dependent 
