template <int D>
class Basis {

   struc Wave {
      IntVector<D> vector;
      std::complex<double> coeff;
      double sqMagnitude;
      int starId;
   }

   struc Star {
      int beginId; 
      int endId;  
      int size; 
      int invertFlag; 
      int signFlag; 
      IntVector<D> wave;
      bool cancel;
   };

   // Associate
   void setUnitCell(const UnitCell& unitCell)
   void setGrid(const Grid& grid)

   // Initialize
   void allocate();
   void deallocate();

   // Accessors 
   int nWave()
   int nStar()

   // Get Wave, access by integer index
   Wave& wave(int i);

   // Access wave by vector
   Wave& wave(IntVector<D> vector);

   // Get Star, access by integer index
   Star& star(int i);

private:

   int nWave_;
   int nStar_;

   DArray<Wave> waves_;
   DArray<Wave> stars_;

   // Indexing that allows identification by IntVector
   DArray<int> waveId_;   
   
};
