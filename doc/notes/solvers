TW = chemical potential field type
TQ = partition function field
TC = concentration field

-------------------------------------------------------------
Propagator Class Concept:

class Propagator
{
public:

   // Initialization
   void setBlock(int directionId);
   void setBlock(Block& block);
   void setPartner(Propagator& partner);
   void addSource(Propagator& other);

   void solve(const TW& w);
   double computeQ();

   const QField& head() const;
   const QField& tail() const;
   const QField& q(int i) const;

   Block& block();

   void setIsSolved(bool isSolved);
   bool isSolved(bool isSolved);

private:

   Block* blockPtr_;
   int directionId_;
   Propagator* partnerPtr_;
   GArray<Propagator<W, Q>*> sourcesPtrs_;

};
-------------------------------------------------------------
Block Class Concept:

class Block
{

public:

   // Setup discretization of space and contour length.
   // Call once when discretization is known.
   // Argumments depend on implementation.
   setGrid(....);

   // Setup solver for specific omega field.
   // Call at beginning of solution for polymer.
   setupSolver(WField const & w); 

   // Compute volume fraction from this block.
   // Parameter prefactor is phi/(q*length), 
   // where q = molecular partition function
   // and length = molecular length or volume
   computeConcentration(double prefactor);

private:

   // Pair of Propagators (one for each direction)
   Pair<Propagator> propagators_;

   // Concentration associated with this block
   CField cField_;

}

-------------------------------------------------------------

template <class Propagator>
class Polymer : public Species, public PolymerDescriptor
{
public:

   /**
   * Read parameters and initialize.
   */
   virtual void readParameters();

   /**
   * Solve modified diffusion equation for all blocks.
   */
   virtual void compute(DArray<WField>& wFields) = 0;

   /**
   * Get monomer concentration field for specific block.
   */
   const C& blockCField(int blockId) const;

   /**
   * Get propagator for a specific block and direction.
   */
   const P& propagator(int blockId, int direction) const;

private:

   Matrix<Propagator> propagators_;

   DArray<C> blockCFields_;

};

-------------------------------------------------------------
template <class C>
class Solvent : public Species, public SolventDescriptor
{
public:

   /**
   * Read parameters and initialize.
   */
   virtual void readParameters();

   /**
   * Compute concentration and partition function.
   */
   virtual void compute() = 0;

   /**
   * Get monomer concentration field for this solvent.
   */
   const C& concentration() const;

protected:

   C concentration_;

};

class Mixture
{
public:

   int nMonomer();
   int nPolymer();
   int nSolvent();

   Monomer& monomer(int id);
   Polymer& polymer(int id);
   Solvent& solvent(int id);

   /**
   * Compute ideal gas properties for all species.
   */
   virtual void compute();

   /**
   * Return W (chemical potential) field for monomer index id.
   */
   virtual WField& wField(int id);

   /**
   * Return concentration field for monomer index id.
   */
   virtual CField& cField(int id);

private:

   /**
   * Array of monomer type descriptors.
   */
   DArray<Monomer> monomers_;

   /**
   * Array of polymer species solvers objects.
   */
   DArray<Polymer> polymers_;

   /**
   * Array of solvent species solvers.
   */
   DArray<Solvent> solvents_;

   /**
   * Array of fields associated with monomer types.
   */
   DArray<WField> wFields_;

   /**
   * Array of monomer concentration fields.
   */
   DArray<CField> cFields_;

};
