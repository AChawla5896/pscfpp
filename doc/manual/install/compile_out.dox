/*! \page install_compile_out_page 2.7 Compiling (Out-of-Source)

\ref install_inout_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_compile_in_page (Next) 
<BR>

We recommend that most users perform an out-of-source build of pscfp++.
To compile pscfp++ out-of-source, after completing all of the required 
setup and configuration steps, one simply invokes the "make" utility 
with appropriate targets from the pscfpp/ root directory. The 
\ref install_overview_page "overview of instructions" given on a
previous page included instructions for compilng pscfp++ out-of-source.  
On this page, we simply repeat these instructions with a bit more 
explanation of what each makefile target should do.

\section compile_fd1d_section Compiling 1D finite difference program

The first step in should be to compile the pscf_fd1d 1D finite-difference
program. The only dependency of this program is the GSL library.  After 
setting environment variables, running the setup script, and making any 
desired changes in the configuration, simply cd to the pscfpp/ root 
directory and enter:
\code
> make fd1d
\endcode
This command will:

  - Compile a large number *.cpp files in the util/, pscf/ and fd1d/ 
    namespace-level subdirectories of the pscfpp/src/ source code 
    directory.

  - Install corresponding object (*.o) and dependency (*.d) files in 
    corresponding locations within the pscfpp/bld/ directory.

  - Create a static library (with file extension *.a) in each of these 
    three namespace-level subdirectories of the bld/ directory.

  - Install an executable file named pscf_fd1d in the pscfpp/bin 
    directory. 

To recompile these programs after changing the configuration (e.g., after 
using the configure script to enable or disable the debugging feature),
simply reissue the "make fd1d" command. The build system will detect if 
you have changed any of the relevant configuration files, and will 
recompile any file that might be effected by such changes.

\section compile_pspc_section Compiling pseudo-spectral CPU programs

The pseudo-spectral programs for periodic microstructures on a CPU 
depend on both the GSL library and the FFTW fast Fourier transform
libraries.  To compile these programs cd to the pscfpp/ root directory 
and enter: \code
> make pspc
\endcode
If this is done after compiling pscf_fd1d, this will compile some 
additional code in src/pspc directory, place *.o and *.d files in the 
pscfpp/bld/pspc directory. It will also install three executables 
named pscf_pc1d, pscf_pc2d and pscf_pc3d in the pscfpp/bin directory.
These three programs are used for problems structures that are 
periodic in 1, 2 and 3 dimensions, respectively. One would thus
use pscf_pc1d to simulat a lamellar (one-dimensional) structure,
pscf_pc2d to simulate a hexagonal cylinder (two-dimension structure),
an pscf_pc3d to simulate a fully three-dimensional structure such
a BCC or gyroid structure.

\section compile__section Compiling GPU-enabled pseudo-spectral programs

To compile the GPU-enabled versions of the pseudo-spectral programs,
after setup, configuration of pscfp++, and configuration of the cuda
compiler, simply enter 
\code
> make pspg
\endcode
from the pscfpp/ root directory.  If successful, this will compile 
code from the util/, pscf/, and pspg/ subdirectories of the src/ 
directory, place object, dependency and library files in the 
pscfpp/bld/ directory tree, and install executables for 1, 2, and
3 dimensional problems named pscf_pg1d, pscf_pg2d and pscf_pg3d in 
the pscfpp/bin directory.

\section compile_cleanup_section Cleaning up

If, for any reason, you would like to clean up after compiling by removing 
all of the object, dependency and library files that are generated during 
compilation, enter
\code
> make clean
\endcode
from the pscfp++ root directory. This will remove any files generated by 
compilation in both the src/ and bld/ directories.

If you want to remove generated files from only one build directory
(e.g., from src/ but not from bld/), simply enter "make clean" from 
the root of that build directory (e.g., from the src/ directory), 
rather than from the pscfpp/ root directory. 

Entering "make clean" from a namespace level subdirectory of any build 
directory will instead remove all generated files from that subdirectory, 
without effecting files in other subdirectories.

\section compile_veryclean_section Reverting to initial state

The "make clean" command discussed above removes files that are generated 
by compilation, but does not remove the various makefile fragments and 
C++ files that are installed prior to compilation by the "setup" script. 
To remove these files as well, and thus return the pscfpp/ directory 
tree to a state close to the  state it had immediately after the repository 
was cloned, instead enter 
\code
> make veryclean
\endcode
from the pscfpp/ root directory. 

Because the "make veryclean" command removes files that are created 
by the setup script, you will need to rerun the setup script after
"make veryclean" before attempting to compile any code.  The "veryclean" 
target does not, however, erase any local compiler setup files that
the user may have created in the make/compiler directory. After 
invoking "make veryclean", a user can thus invoke setup with the name 
of a previously created compiler configuration file as an argument in
order to recreate the same configuration.

<BR>
\ref install_inout_page (Prev) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_page   (Up) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_compile_in_page (Next) 

*/
