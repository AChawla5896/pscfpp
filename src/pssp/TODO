TODO (for pssp pseudospectral CPU code)

------------------------------------------------------------------------
class Pscf::UnitCell: (assigned to Anshul)

   - See pscf/crystal/TODO 

------------------------------------------------------------------------
class Pscf::Pssp::Basis: (assigned to Dave)

   - See pssp/basis/TODO 

   - Goal: Compare examples of waves and star outputs from pscfpp to 
     those from fortran pscf to check compatibility.

   - Fix discrepancy in choice of characteristic wave Basis:Star:waveBz

------------------------------------------------------------------------
Unit Tests: (assigned to Anshul, with help with Basis as needed)

   - Clean up unit test in src/pssp/tests. 

     - Add unit tests of regression (i.e., comparison to Fortran) for 
       several classic phases, e.g., lamellar, hex and bcc, initially 
       with phases computed with no symmetry imposed. To do this, use
       fortran to convert a solution from the fortran code into rgrid, 
       and then used pscfpp to convert this to a symmetry adapted file
       format in which you use space group "I".  Start with lamellar. 
       Store files containing an initial condition in symmetry adapted 
       form in the pssp/system/in directory.

     - After confirming  equivalence of bases from fortran pscf and 
       pscfpp, try reading a fortran solution directly into pscfpp.
       Start with lamellar with inversion symmetry, then hexagonal,
       and bcc
       
     - Try sharing files from from pscf (fortran) to pscfpp for more
       complicated space groups, such as gyroid, and at least one
       group with no inversion symmetry.  

     - Include unit tests of round trips between field file formats, 
       using files generated by Fortran PSCF when possible. 

     - Move all input files used by tests into in/ subdirectory, and
       include a CONTENTS file that explains what each file in that
       directory is for and which tests use it. 

------------------------------------------------------------------------
class System reorganization: (assigned to Dave, lower priority)

   - Problem: The System class implementation is bloated with code that
     should somehow be moved to somewhere more appropriate. This is a
     reflection of the way things were done in the fortran code, but 
     was always a bad design. 

     Approach: Figure out ways to move more code implementation out of 
     the System class, or out of the System::readCommands function. 
     Targets for removal include
 
         - Field file i/o functions (including file open/close)
         - Field file conversion functions (including file open/close)
         - Iteration including opening and reading of input file

     Possibility: Add fieldUtil class in pssp/field to contain 

         - Functions to read and write file formats for multiple monomers
         - Functions to apply conversions to same file formats
         - Conversion functions that require a Basis can take a Basis 
           as an argument.

     Add separate functions to read omega field files in one or more
     formats. Separate these from the ITERATE command.

------------------------------------------------------------------------
Later:

   - Add point solvents.

   - Add sweep functionality.

