TODO (for pssp pseudospectral CPU code)

------------------------------------------------------------------------
class Pscf::UnitCell: (assigned to Anshul)

   - See pscf/crystal/TODO 

   - Work on this in a separate branch, merge into your own master
     only when done and tested, then retest in master, and finally
     send a pull request.
------------------------------------------------------------------------
Pssp Solver classes stress interface (assigned to Anshul)

   - Add unit tests to pssp/tests/system that test the values of
     stress, using a numerical comparison to values obtained with
     the fortran code. I suggest converging the fortran code for
     several phases (e.g., lam, hex and bcc) with domain = false
     at a unit cell length slightly different than the equilibrium
     length, using the resulting converged omega field as an input 
     to the unit test, and testing numerical agreement with the
     stress value obtained from fortran. 

   - See pssp/solvers/TODO for a description of requested interface 
     changes. Establish unit tests for stress values before changing 
     the code.

   - Work on this in a separate branch, merge into your own master
     only when done and tested, then retest in master, and finally
     send a pull request.
------------------------------------------------------------------------
Unit Tests: (assigned to Anshul, with help with Basis as needed)

   - Include unit tests of round trips between field file formats, using 
     files generated by Fortran PSCF when possible. One way to do this is
     to read in a symmetry adapted format, save the array of coefficients
     after it is read in, convert to rgrid and then back to symmetry 
     adapted form and compare the final symmetry adapted form to the
     original. As noted above, comparing the symmetry adapted forms 
     obtained after reading removes the problem with different ordering
     of stars with the same eigenvalue.

   - Unit tests of stress, as noted above.

   - Unit tests of convergence and agreement with Fortran results for
     several common phases. Test phases should include lamellar, hex
     and bcc. For each, use fortran to compute converted solutions at 
     both the relaxed (zero stress) unit cell dimensions and converged 
     solutions with a fixed unit cell parameter slightly different 
     from the relaxed value. For each such phase, add tests of:

       - Convergence of the solution with a relaxed unit cell back to 
         the same solution from a slightly different initial unit cell 
         parameter, as declared in the parameter file. To test agreement 
         with the reference solution, I suggest reading the solution for
         the relaxed unit cell, and storing this initial array into a
         separate array, then comparing this to the final array. Because 
         both arrays are defined using the same Basis (the one computed
         by pscfpp), the ordering of basis functions will be the same,
         even if a slighty different ordering was used in the input 
         file.

       - Convergence with fixed unit cell at a value slightly different
         from the equilibrium value. For this purpose, read in the 
         solution for the relaxed unit cell, but turn domain iteration
         off. Compare both the final omega field and stress to values
         obtained from the fortran code.

------------------------------------------------------------------------
class Pscf::Pssp::Basis: (assigned to Dave)

   - See pssp/basis/TODO 

------------------------------------------------------------------------
class System reorganization: (assigned to Dave, lower priority)

   - Finish testing FieldIo class and replace member functions of 
     System by calls to corresponding functions of FieldIo.

   - Create class FieldConverter that contains member functions to convert
     between formats. Test and replace conversion functions that are
     now in Basis by these functions. This will allow a smaller Basis 
     class to be moved to Pscf namespace, so that it can be used by 
     the GPU code. 

------------------------------------------------------------------------
Later (for CPU code alone)

   - Add point solvents.

   - Add sweep functionality.

